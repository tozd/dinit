# We prefer this order semantically, but in fact we
# run test and build jobs simultaneously.
stages:
  - test
  - build
  - deploy
  - sync

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  # We want full history so that "git describe" always works correctly.
  GIT_DEPTH: 0
  FF_ENABLE_BASH_EXIT_CODE_CHECK: "true"
  # We always want to run with the Go version installed in a Docker image.
  GOTOOLCHAIN: local
  DOCKER_PIPELINE_IMAGE_NAME: "$CI_REGISTRY_IMAGE/pipeline:$CI_PIPELINE_ID"
  DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: "1"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic"

test:
  stage: test

  image: golang:1.21-alpine3.18

  before_script:
    - apk --update add make bash gcc musl-dev
    - (cd /go; go install gotest.tools/gotestsum@v1.10.1)
    - (cd /go; go install github.com/boumenot/gocover-cobertura@v1.2.0)

  script:
    - make test-ci

  artifacts:
    when: always
    reports:
      junit: tests.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - tests.xml
      - coverage.html
      - coverage.xml
    expire_in: never

  coverage: '/coverage: \d+\.\d+% of statements/'

test_e2e:
  stage: test

  image: golang:1.21-alpine3.18

  services:
    - docker:23-dind

  variables:
    DOCKER_HOST: tcp://docker:2375

  before_script:
    - apk --update add docker-cli-buildx make gcc musl-dev bash
    - (cd /go; go install github.com/boumenot/gocover-cobertura@v1.2.0)
    - docker info
    - echo "$CI_JOB_TOKEN" | docker login --username gitlab-ci-token --password-stdin "$CI_REGISTRY"

  script:
    - docker build --tag dinit --build-arg DINIT_BUILD_FLAGS="-race -cover -covermode atomic" .
    - docker run --rm -v "$(pwd)/coverage:/coverage" -v "$(pwd)/tests/service:/etc/service" -e GOCOVERDIR=/coverage -e DINIT_LOG_LEVEL=debug dinit > >(tee -a defaults-stdout.log) 2> >(tee -a defaults-stderr.log >&2)
    - docker run --rm -v "$(pwd)/coverage:/coverage" -v "$(pwd)/tests/service:/etc/service" -e GOCOVERDIR=/coverage -e DINIT_LOG_LEVEL=debug -e DINIT_REPARENTING_POLICY=adopt dinit > >(tee -a adopt-stdout.log) 2> >(tee -a adopt-stderr.log >&2)
    - docker run --rm -v "$(pwd)/coverage:/coverage" -v "$(pwd)/tests/service:/etc/service" -e GOCOVERDIR=/coverage -e DINIT_LOG_LEVEL=debug -e DINIT_JSON_STDOUT=0 dinit > >(tee -a nojson-stdout.log) 2> >(tee -a nojson-stderr.log >&2)
    - ./tests/compare.sh
    - go tool covdata percent -i=coverage
    - go tool covdata textfmt -i=coverage -o coverage.txt
    - gocover-cobertura < coverage.txt > coverage.xml
    - go tool cover -html=coverage.txt -o coverage.html

  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - tests/results/*:*.log
      - coverage.html
      - coverage.xml
    expire_in: never

  coverage: '/coverage: \d+\.\d+% of statements/'

lint:
  stage: test

  image: golang:1.21-alpine3.18

  before_script:
    - apk --update add make bash gcc musl-dev
    - wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

  script:
    - make lint-ci

  artifacts:
    when: always
    reports:
      codequality: codeclimate.json
    expire_in: never

fmt:
  stage: test

  image: golang:1.21-alpine3.18

  before_script:
    - apk --update add make bash git gcc musl-dev grep
    - go install mvdan.cc/gofumpt@v0.5.0
    - go install golang.org/x/tools/cmd/goimports@v0.13.0

  script:
    - make fmt-ci

lint_docs:
  stage: test

  image: node:17-alpine3.14

  before_script:
    - apk --update add make bash

  script:
    - make lint-docs

audit:
  stage: test

  image: golang:1.21-alpine3.18

  before_script:
    - apk --update add make bash git gcc musl-dev
    - go install github.com/sonatype-nexus-community/nancy@v1.0.42

  script:
    - make audit

commits:
  stage: test

  image: golang:1.21-alpine3.18

  variables:
    GIT_DEPTH: "0"

  before_script:
    - apk --update add git

  script:
    - '! git log --oneline "-G^(<<<<<<<|=======|>>>>>>>)" | grep "^"'

docker:
  stage: build

  image: docker:23-git

  services:
    - docker:23-dind

  before_script:
    - docker info
    - echo "$CI_JOB_TOKEN" | docker login --username gitlab-ci-token --password-stdin "$CI_REGISTRY"

  script:
    - docker build
      --tag "$DOCKER_PIPELINE_IMAGE_NAME"
      --tag "$CI_REGISTRY_IMAGE/commit:$CI_COMMIT_SHA" .
    - docker push "$DOCKER_PIPELINE_IMAGE_NAME"
    - docker push "$CI_REGISTRY_IMAGE/commit:$CI_COMMIT_SHA"
    - export IMAGE_ID=$(docker create "$DOCKER_PIPELINE_IMAGE_NAME")
    - docker cp "$IMAGE_ID:/dinit" dinit-linux-amd64
    - docker rm "$IMAGE_ID"

  artifacts:
    expose_as: binaries
    name: binaries
    paths:
      - dinit-linux-amd64
    expire_in: never

  # We want to run it as soon as possible and do not wait for test stage to finish.
  needs: []

upload_binaries:
  stage: deploy

  image: curlimages/curl:8.1.2

  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file dinit-linux-amd64 "$PACKAGE_REGISTRY_URL/linux-amd64/${CI_COMMIT_REF_NAME#v}/dinit"'

  rules:
    # Only on protected tags. Protected tags start with "v".
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/'

  dependencies:
    - docker

publish:
  stage: deploy

  image: golang:1.21-alpine3.18

  script:
    - GOPROXY=proxy.golang.org go list -m "gitlab.com/tozd/dinit@$CI_COMMIT_REF_NAME"

  rules:
    # Only on protected tags on main repository. Protected tags start with "v".
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/ && $CI_PROJECT_PATH == "tozd/dinit"'

  # We do not need build artifacts in this job.
  dependencies: []

sync_releases:
  stage: sync

  image:
    name: registry.gitlab.com/tozd/gitlab/release/tag/v0-6-0:latest-debug
    entrypoint: [""]

  script:
    # On branch jobs, just update or remove releases, thus releases are created only on tag jobs.
    - /gitlab-release ${CI_COMMIT_BRANCH:+--no-create}

  rules:
    # Protected tags start with "v".
    - if: '$GITLAB_API_TOKEN && ($CI_COMMIT_BRANCH == "main" || ($CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/))'

  # We do not need build artifacts in this job.
  dependencies: []

sync_config:
  stage: sync

  image:
    name: registry.gitlab.com/tozd/gitlab/config/tag/v0-5-0:latest-debug
    entrypoint: [""]

  script:
    - /gitlab-config set

  rules:
    - if: '$GITLAB_API_TOKEN && $SOPS_AGE_KEY_FILE && $CI_COMMIT_BRANCH == "main"'
      changes:
        - .gitlab-conf.yml

  # We do not need build artifacts in this job.
  dependencies: []
